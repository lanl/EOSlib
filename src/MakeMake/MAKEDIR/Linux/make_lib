# MakeFile generated by MakeMake with template make_lib (Linux version)
# should be called one level up with Compile

C_COMPL=gcc
CFLAGS=

CC_COMPL=g++
#CCFLAGS=-rdynamic
#CCFLAGS=-Ur
CCFLAGS=-fpic

F_COMPL=g77
FFLAGS=

DFLAGS=-DLINUX
CWD=_CWD			# set by Compile

#####

CC_INCLUDE=$(CWD)/include

DEBUG=-ggdb

IFLAGS=-I.. -I$(CC_INCLUDE) -I$(CC_INCLUDE)/backward
LIB=lib.a


.INCLUDE_DEPENDENCIES


.SUFFIXES:


HEADERS=HFILE[*].h
CFILES=CFILE[*].c 
CCFILES=CCFILE[*].C 
FFILES=FFILE[*].f 
OFILES=CFILE[*].o CCFILE[*].o FFILE[*].o

OBJECTS=$(OFILES)


$(LIB) : Cfiles $(LIB)(CFILE[*].o) $(LIB)(CCFILE[*].o) $(LIB)(FFILE[*].o)


Headers: $(HEADERS)

Cfiles: $(CFILES) $(CCFILES) $(FFILES)
	touch MakeFile

Objects: $(OBJECTS)


Touch: Headers Cfiles

############################

$(LIB)(CFILE[i].o) : CFILE[i].c
	$(C_COMPL)  $(DEBUG) $(DFLAGS) $(CFLAGS)  $(IFLAGS) -c CFILE[i].c;
	ar ru $(LIB) CFILE[i].o;
	rm CFILE[i].o
	
$(LIB)(CCFILE[i].o) : CCFILE[i].C
	$(CC_COMPL) $(DEBUG) $(DFLAGS) $(CCFLAGS) $(IFLAGS) -c CCFILE[i].C;
	ar ru $(LIB) CCFILE[i].o;
	rm CCFILE[i].o
	
$(LIB)(FFILE[i].o) : FFILE[i].f
	$(F_COMPL)  $(DEBUG) $(DFLAGS) $(FFLAGS)  $(IFLAGS) -c FFILE[i].f;
	ar ru $(LIB) FFILE[i].o;
	rm FFILE[i].o
		
############################

HFILE[i].h : HFILE_DEP[i]
	touch HFILE[i].h

CFILE[i].c : CFILE_DEP[i]
	touch CFILE[i].c

CCFILE[i].C : CCFILE_DEP[i]
	touch CCFILE[i].C

FFILE[i].f : FFILE_DEP[i]
	touch FFILE[i].f

############################

cleanup:
	-rm -f *.o tags __.SYMDEF *% *~ junk* dummy* core *.out

Cleanup: cleanup
	-rm -f *.a

