#  MakeFile generated by MakeMake with make_exec template (Linux version)
#  should be called by Compile to set CWD, OS and STDCDIR 
#version=-V  4.1.2 20070626 (Red Hat 4.1.2-14)
version=-DSTL
C_COMPL=gcc ${version}
#CFLAGS=-fpic -m64 -march=core2
CFLAGS=-fpic
CC_COMPL=g++ ${version}
#CCFLAGS=-rdynamic
#CCFLAGS=-fpic -Ur
#CCFLAGS=-fpic -m64 -march=core2
CCFLAGS=-fpic
F_COMPL=g77 ${version}
#FFLAGS=
#FFLAGS=-fpic -m64
FFLAGS=-fpic
DFLAGS=-DLINUX
CWD=/home/childrj/git-repos/eoslib
OS=Linux
#STDCDIR=_STDCDIR		# set by Compile
#SYSLINKFLAGS=-L$(STDCDIR) -lstdc++
#LFLAGS=-L$(CC_LIB) $(SYSLINKFLAGS)
LFLAGS=-L$(CC_LIB)
#####
VERSION=
ECHO=echo
CC_INCLUDE=$(CWD)/include
CC_LIB=$(CWD)/lib/$(OS)
XIFLAGS=
IFLAGS=-I. -I$(CC_INCLUDE) -I$(CC_INCLUDE)/backward $(XIFLAGS) 
IFLAGS_SUB=-I.. -I$(CC_INCLUDE) -I$(CC_INCLUDE)/backward $(XIFLAGS)
INCLUDE_DIR=$(CC_INCLUDE)
EXEC_DIR=$(CWD)/bin
LIB_DIR=$(CC_LIB)
DEBUG=-ggdb
ALL=SubMake LIBS $(EXECS)
PWD=Local
####################################################
# Suffix Rules #
.SUFFIXES:
.SUFFIXES: .o .c .C .f
.c.o:
	$(C_COMPL)  $(DEBUG) $(DFLAGS) $(CFLAGS)  $(IFLAGS) -c $<;
	
.C.o:
	$(CC_COMPL) $(DEBUG) $(DFLAGS) $(CCFLAGS) $(IFLAGS) -c $<;
	
.f.o:
	$(F_COMPL)  $(DEBUG) $(DFLAGS) $(FFLAGS)  $(IFLAGS) -c $<;
	
####################################################
HEADERS=Arg.h ErrorHandler.h LocalIo.h LocalMath.h String.h
SUBS=Io Math String 
SUB_LIBS=LocalIo.a LocalMath.a String.a 
LIB_PREFIX=lib
LIB_TAG=.a
####################################################
EXECS=Test TestFunc TestCat TestSplit TestError TestManip 
all: $(ALL)
LIBS: $(SUB_LIBS)
SubMake: Io/MakeFile Math/MakeFile String/MakeFile
############################
Test: Test.o  LocalIo.a
	$(CC_COMPL) $(DEBUG) $(CCFLAGS) $(LFLAGS) \
		-o Test Test.o  		LocalIo.a
	

TestFunc: TestFunc.o  LocalMath.a
	$(CC_COMPL) $(DEBUG) $(CCFLAGS) $(LFLAGS) \
		-o TestFunc TestFunc.o  	LocalMath.a
	

TestCat: TestCat.o  String.a LocalIo.a
	$(CC_COMPL) $(DEBUG) $(CCFLAGS) $(LFLAGS) \
		-o TestCat TestCat.o 	String.a LocalIo.a
	

TestSplit: TestSplit.o  String.a LocalIo.a
	$(CC_COMPL) $(DEBUG) $(CCFLAGS) $(LFLAGS) \
		-o TestSplit TestSplit.o  	String.a LocalIo.a
	

TestError: TestError.o  LocalIo.a
	$(CC_COMPL) $(DEBUG) $(CCFLAGS) $(LFLAGS) \
		-o TestError TestError.o 	LocalIo.a
	

TestManip: TestManip.o  LocalIo.a
	$(CC_COMPL) $(DEBUG) $(CCFLAGS) $(LFLAGS) \
		-o TestManip TestManip.o 	LocalIo.a
	

############################
LocalIo.a : Io/*.[hcCf]
	@$(ECHO)
	@rm -f LocalIo.a
	cd Io; make -f MakeFile                         \
		"CWD=$(CWD)"           "OS=$(OS)"           \
                "DFLAGS=$(DFLAGS)"     "DEBUG=$(DEBUG)"     \
		"C_COMPL=$(C_COMPL)"   "CFLAGS=$(CFLAGS)"   \
		"CC_COMPL=$(CC_COMPL)" "CCFLAGS=$(CCFLAGS)" \
		"F_COMPL=$(F_COMPL)"   "FFLAGS=$(FFLAGS)"   \
		"IFLAGS=$(IFLAGS_SUB)";
	ln Io/lib.a LocalIo.a
	@$(ECHO)

LocalMath.a : Math/*.[hcCf]
	@$(ECHO)
	@rm -f LocalMath.a
	cd Math; make -f MakeFile                         \
		"CWD=$(CWD)"           "OS=$(OS)"           \
                "DFLAGS=$(DFLAGS)"     "DEBUG=$(DEBUG)"     \
		"C_COMPL=$(C_COMPL)"   "CFLAGS=$(CFLAGS)"   \
		"CC_COMPL=$(CC_COMPL)" "CCFLAGS=$(CCFLAGS)" \
		"F_COMPL=$(F_COMPL)"   "FFLAGS=$(FFLAGS)"   \
		"IFLAGS=$(IFLAGS_SUB)";
	ln Math/lib.a LocalMath.a
	@$(ECHO)

String.a : String/*.[hcCf]
	@$(ECHO)
	@rm -f String.a
	cd String; make -f MakeFile                         \
		"CWD=$(CWD)"           "OS=$(OS)"           \
                "DFLAGS=$(DFLAGS)"     "DEBUG=$(DEBUG)"     \
		"C_COMPL=$(C_COMPL)"   "CFLAGS=$(CFLAGS)"   \
		"CC_COMPL=$(CC_COMPL)" "CCFLAGS=$(CCFLAGS)" \
		"F_COMPL=$(F_COMPL)"   "FFLAGS=$(FFLAGS)"   \
		"IFLAGS=$(IFLAGS_SUB)";
	ln String/lib.a String.a
	@$(ECHO)

############################
Io/MakeFile: $(HEADERS) Io/*.[hcCf]
	cd Io; MakeMake *.[hcCf] > MakeFile             \
		"CWD=$(CWD)"           "OS=$(OS)"           \
                "DFLAGS=$(DFLAGS)"     "DEBUG=$(DEBUG)"     \
		"C_COMPL=$(C_COMPL)"   "CFLAGS=$(CFLAGS)"   \
		"CC_COMPL=$(CC_COMPL)" "CCFLAGS=$(CCFLAGS)" \
		"F_COMPL=$(F_COMPL)"   "FFLAGS=$(FFLAGS)"   \
		"IFLAGS=$(IFLAGS_SUB)";			    \
		make -f MakeFile Touch
			

Math/MakeFile: $(HEADERS) Math/*.[hcCf]
	cd Math; MakeMake *.[hcCf] > MakeFile             \
		"CWD=$(CWD)"           "OS=$(OS)"           \
                "DFLAGS=$(DFLAGS)"     "DEBUG=$(DEBUG)"     \
		"C_COMPL=$(C_COMPL)"   "CFLAGS=$(CFLAGS)"   \
		"CC_COMPL=$(CC_COMPL)" "CCFLAGS=$(CCFLAGS)" \
		"F_COMPL=$(F_COMPL)"   "FFLAGS=$(FFLAGS)"   \
		"IFLAGS=$(IFLAGS_SUB)";			    \
		make -f MakeFile Touch
			

String/MakeFile: $(HEADERS) String/*.[hcCf]
	cd String; MakeMake *.[hcCf] > MakeFile             \
		"CWD=$(CWD)"           "OS=$(OS)"           \
                "DFLAGS=$(DFLAGS)"     "DEBUG=$(DEBUG)"     \
		"C_COMPL=$(C_COMPL)"   "CFLAGS=$(CFLAGS)"   \
		"CC_COMPL=$(CC_COMPL)" "CCFLAGS=$(CCFLAGS)" \
		"F_COMPL=$(F_COMPL)"   "FFLAGS=$(FFLAGS)"   \
		"IFLAGS=$(IFLAGS_SUB)";			    \
		make -f MakeFile Touch
			

############################
############################
Arg.h : ./LocalIo.h 
	touch Arg.h

Test.C : Arg.h 
	touch Test.C

TestCat.C : LocalIo.h String.h 
	touch TestCat.C

TestError.C : ErrorHandler.h 
	touch TestError.C

TestFunc.C : ./LocalMath.h 
	touch TestFunc.C

TestManip.C : ./LocalIo.h 
	touch TestManip.C

TestSplit.C : ./LocalIo.h String.h 
	touch TestSplit.C

############################
############################
Version: Cleanup
	tar cvf ../$(PWD).tar$(VERSION) .
cleanup:
	rm -f a.out core tags *.o *% *~ temp.* junk* dummy* *.log *.dvi *.out *.so
	cd Io; make -f MakeFile cleanup
	cd Math; make -f MakeFile cleanup
	cd String; make -f MakeFile cleanup
Cleanup: 
	rm -f a.out core tags *.o *% *~ temp.* junk* dummy* *.log *.dvi *.out *.so
	rm -f $(EXECS) $(SUB_LIBS)
	cd Io; make -f MakeFile Cleanup
	cd Math; make -f MakeFile Cleanup
	cd String; make -f MakeFile Cleanup
############################
install: Cleanup InstallHeaders InstallLibs InstallExecs
	make -f MakeFile Cleanup
##
InstallHeaders: 
	@if [ 5 -gt 0 ] ; then                              \
	    if [ ! -z "$(INCLUDE_DIR)" -a  -d "$(INCLUDE_DIR)" ]; then     \
		make -f MakeFile "INCLUDE_DIR=$(INCLUDE_DIR)" INSTALL_HEADERS; \
	    else                                                           \
		$(ECHO) "Invalid Include Directory (INCLUDE_DIR)";             \
		exit 1;                                                        \
	    fi                                                             \
	fi
	
INSTALL_HEADERS:
	@if cmp -s Arg.h $(INCLUDE_DIR)/Arg.h; then  \
			$(ECHO) "\nArg.h has not changed\n";            \
	else                                                               \
		cp Arg.h $(INCLUDE_DIR);                            \
	       $(ECHO) "\nArg.h INSTALLED in $(INCLUDE_DIR)\n"; \
	fi
	@if cmp -s LocalIo.h $(INCLUDE_DIR)/LocalIo.h; then  \
			$(ECHO) "\nLocalIo.h has not changed\n";            \
	else                                                               \
		cp LocalIo.h $(INCLUDE_DIR);                            \
	       $(ECHO) "\nLocalIo.h INSTALLED in $(INCLUDE_DIR)\n"; \
	fi
	@if cmp -s ErrorHandler.h $(INCLUDE_DIR)/ErrorHandler.h; then  \
			$(ECHO) "\nErrorHandler.h has not changed\n";            \
	else                                                               \
		cp ErrorHandler.h $(INCLUDE_DIR);                            \
	       $(ECHO) "\nErrorHandler.h INSTALLED in $(INCLUDE_DIR)\n"; \
	fi
	@if cmp -s LocalMath.h $(INCLUDE_DIR)/LocalMath.h; then  \
			$(ECHO) "\nLocalMath.h has not changed\n";            \
	else                                                               \
		cp LocalMath.h $(INCLUDE_DIR);                            \
	       $(ECHO) "\nLocalMath.h INSTALLED in $(INCLUDE_DIR)\n"; \
	fi
	@if cmp -s String.h $(INCLUDE_DIR)/String.h; then  \
			$(ECHO) "\nString.h has not changed\n";            \
	else                                                               \
		cp String.h $(INCLUDE_DIR);                            \
	       $(ECHO) "\nString.h INSTALLED in $(INCLUDE_DIR)\n"; \
	fi
##
InstallLibs:
	@if [ 3 -gt 0 ]; then                                 \
	    if [ ! -z "$(LIB_DIR)" -a  -d "$(LIB_DIR)" ]; then             \
		make -f MakeFile                                               \
		     "CWD=$(CWD)"               "OS=$(OS)"                     \
             "DFLAGS=$(DFLAGS)"         "DEBUG=$(DEBUG)"               \
		     "C_COMPL=$(C_COMPL)"       "CFLAGS=$(CFLAGS)"             \
		     "CC_COMPL=$(CC_COMPL)"     "CCFLAGS=$(CCFLAGS)"           \
		     "F_COMPL=$(F_COMPL)"       "FFLAGS=$(FFLAGS)"             \
		     "IFLAGS=-I$(INCLUDE_DIR)     -I$(INCLUDE_DIR)/backward $(XIFLAGS)"                 \
             "IFLAGS_SUB=-I$(INCLUDE_DIR) -I$(INCLUDE_DIR)/backward $(XIFLAGS)"                 \
             "LFLAGS=$(LFLAGS)"         "LIB_DIR=$(LIB_DIR)"           \
             "LIB_PREFIX=$(LIB_PREFIX)" "LIB_TAG=$(LIB_TAG)"           \
		     INSTALL_LIBS ;                                            \
	    else                                                           \
		$(ECHO) "Invalid Library Directory (LIB_DIR)"; exit 1;         \
	    fi                                                             \
	fi
INSTALL_LIBS: LocalIo.a LocalMath.a String.a
	@cp LocalIo.a $(LIB_DIR)/$(LIB_PREFIX)LocalIo$(LIB_TAG); \
	$(ECHO) "*** LocalIo installed as                               \
		$(LIB_PREFIX)LocalIo$(LIB_TAG) in directory $(LIB_DIR)"
	@cp LocalMath.a $(LIB_DIR)/$(LIB_PREFIX)LocalMath$(LIB_TAG); \
	$(ECHO) "*** LocalMath installed as                               \
		$(LIB_PREFIX)LocalMath$(LIB_TAG) in directory $(LIB_DIR)"
	@cp String.a $(LIB_DIR)/$(LIB_PREFIX)String$(LIB_TAG); \
	$(ECHO) "*** String installed as                               \
		$(LIB_PREFIX)String$(LIB_TAG) in directory $(LIB_DIR)"
##
InstallExecs:
	@if [ 0 -gt 0 ]; then                                \
	    if [ ! -z "$(EXEC_DIR)" -a -d "$(EXEC_DIR)" ]; then            \
		make -f MakeFile                                               \
		     "CWD=$(CWD)"               "OS=$(OS)"                     \
              "DFLAGS=$(DFLAGS)"         "DEBUG=$(DEBUG)"              \
		     "C_COMPL=$(C_COMPL)"       "CFLAGS=$(CFLAGS)"             \
		     "CC_COMPL=$(CC_COMPL)"     "CCFLAGS=$(CCFLAGS)"           \
		     "F_COMPL=$(F_COMPL)"       "FFLAGS=$(FFLAGS)"             \
		     "IFLAGS=-I$(INCLUDE_DIR)     -I$(INCLUDE_DIR)/backward $(XIFLAGS)"                 \
             "IFLAGS_SUB=-I$(INCLUDE_DIR) -I$(INCLUDE_DIR)/backward $(XIFLAGS)"                 \
             "LFLAGS=$(LFLAGS)"         "EXEC_DIR=$(EXEC_DIR)"         \
		      INSTALL_EXECS ;                                          \
	     else                                                          \
		$(ECHO) "Invalid Executable Directory (EXEC_DIR)"; exit 1;     \
	     fi                                                            \
	 fi
INSTALL_EXECS: 
	@for script in  ; do			            \
	    if [ -x $$script.sh ] ; then                        \
               cp $$script.sh $(EXEC_DIR) ;                 \
            fi                                              \
	 done
