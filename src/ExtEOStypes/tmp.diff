diff -r HEburn-/HotSpotRate.h HEburn/HotSpotRate.h
6,7c6,7
< #define HotSpotRate_vers "HotSpotRate_v2.0.1"
< #define HotSpotRate_date "Jan. 5, 2013"
---
> #define HotSpotRate_vers "HotSpotRate_v2.0.2"
> #define HotSpotRate_date "May 18, 2013"
20c20,25
< //  HotSpot reaction rate
---
> //  HotSpot reaction rate (SURF model)
> //  Ref: Reactive burn models and Ignition & Growth concept
> //       R. Menikoff and M. Sam Shaw
> //       New Models Conference 2010
> //       http://dx.doi.org/10.1051/epjconf/20101000003
> //      
33,34d37
< //  Rate = (d/dt) lambda
< //
36,54c39,67
< //                = g(s(t,Ps)),             for t>0
< //  where g(s)    = 1 - exp(-s^2),          simplest choice
< //                  accounts for hot-spot growth geometry
< //        s(t,Ps) = r(t)/rs(Ps),            dimensionless reaction length
< //        r(t)    = int_0^t dt D(p(t)),     D(p) = Dref*(p/Ps)^n
< //                  note: factor of Dref incorporated in rs(Ps)
< //                  distance reaction front propagates from single hot spot
< //        p(t) is pressure based on EOS and local particle state (V,e,lambda)
< //                  (V,e) supplied by hydro code
< //        rs(Ps)  = xref/f(Ps),             f(Ps) = exp(A+B*min(Ps,Psmax)/Pref)
< //          rs is length scale, choosen as average distance between hot spots
< //          f is proportional to Nhs^(1/3)
< //          where Nhs is hot-spot number density
< //                which depends on lead shock strength
< //                Psmax to limit hot-spot density
< //  re-express s as
< //  s = exp(A+B*Ps/Pref) * int_0^t (p/Pref)^n dt/tref
< //      where tref = xref/Dref
< //  reference quantities (Pref, tref), in effect, correspond to choice of units
---
> //                = g(s),                   for t>0
> //  reaction rate = (d/dt)lambda
> //                = (dg/ds)*(ds/dt)
> //
> //           g(s) is reaction scale function
> //                   accounts for hot-spot growth geometry
> //        (d/dt)s = 0,                      for t<0
> //                = f(Ps)*D(p(t),Ps)/tref,  for t>0
> //
> //          f(Ps) is shock strength factor
> //                   proportional to (hot spot density)^1/3
> //        D(p,Ps) is deflagration speed factor
> //           p(t) is pressure based on EOS and local particle state (V,e,lambda)
> //                   (V,e) supplied by hydro code
> //  reference quantities (Pref, tref) correspond to choice of units
> //
> //  specific choice of fitting forms
> //         g(s)  = 1 - exp(-s^2)
> //        f0(Ps) = exp( A + B*Ps/Pref )
> //
> //               = 0,                                    for      Ps < P0
> //         f(Ps) = f0(Ps) - f0(P0)*(1+B*(Ps-P0)/Pref),   for P0 < Ps < P1
> //               = f1*(1+df1*[1-exp(-B2*(Ps-P1)/Pref)]), for      Ps < P1
> //         where
> //            f1 = f(P1)
> //            B2 = B/abs(df1) * Pref*(df/dPs)(P1) / f1
> //
> //       D(p,Ps) = (p/Ps)^n
> //  
85,87c98,106
<     double A;           // dimensionless parameter for f(Ps)
<     double B;           // dimensionless parameter for f(Ps)
<     double Psmax;       // limit f(Ps/Pref) -> f(min(Ps,Psmax)/Pref)
---
>     double A;           // dimensionless parameter for f(Ps), Ps<P1
>     double B;           // dimensionless parameter for f(Ps), Ps<P1
>     double P0;          // minimum pressure
>     double P1;          // switch pressure
>     double df1;         // f(Ps) -> f1*(1+df1) for Ps >> P1
>     //
>     double fp0;         // fp0 = f0(P0)
>     double f1;          // f1  = f(P1)
>     double B2;          // B2 such that df/dPs continuous at Ps=P1
115c134
<     { return pow(p, n); }  // p = P/Ps
---
>     { return (n==0.) ? 1. : pow(p, n); }  // p = P/Ps
121,124d139
< inline double HotSpotRate::f(double ps)
<     { return exp(A+B*min(ps,Psmax)/Pref); }
< inline double HotSpotRate::dfdp(double ps)
<     { return (B/Pref)*exp(A+B*min(Psmax,ps)/Pref); }
diff -r HEburn-/MakeFile HEburn/MakeFile
18c18
< CWD=/home/ralph/AMRITA/CFD/EOSlib/src
---
> CWD=/home/ralph/AMRITA/CFD/EOSlib
diff -r HEburn-/Subs/HotSpotRate.C HEburn/Subs/HotSpotRate.C
23,26c23,32
<     n = 0.0;
<     A = 0.0;
<     B = 0.0;
<     Psmax = 1.e10;      // HUGE
---
>     n   = 0.0;
>     A   = 0.0;
>     B   = 0.0;
>     P0  = -1.;
>     P1  = -1.;
>     df1 = 0.0;
>     //
>     fp0 = 0.0;
>     f1  = 0.0;
>     B2  = 0.0;
52c58,64
<     rate->Psmax       = Psmax;
---
>     rate->P0          = P0;
>     rate->P1          = P1;
>     rate->df1         = df1;
>     //
>     rate->fp0         = fp0;
>     rate->f1          = f1;
>     rate->B2          = B2;
96,97c108,115
<     Psmax = 1.e10;      // HUGE
<     calc.Variable("Psmax", &Psmax);
---
> 
>     P0 = -1.;
>     P1 = -1.;
>     calc.Variable("P0",    &P0);
>     calc.Variable("P1",    &P1);
>     calc.Variable("Psmax", &P1);    // backwards compatibility
>     df1 = 0.0;
>     calc.Variable("df1",  &df1);
119,120c137,157
<     if( Psmax <= 0.0 )
<         return 1;
---
>     fp0 = (P0<0.0) ? 0.0 : exp(A+B*P0/Pref);
>     if( P1 <= 0.0 )
>     {
>         P1  = 1.e12;    // HUGE
>         df1 = 0.0;      // not used
>         f1  = 0.0;      // not used
>         B2  = 0.0;      // not used
>     }
>     else
>     {
>         if( P0 > P1 )
>             return 1;
>         f1  = exp(A+B*P1/Pref) - fp0*(1.+B*(P1-P0)/Pref);
>         if( df1 == 0.0 )
>             B2 = 0.0;   // not used
>         else
>         {
>             double f1p = B*(exp(A+B*P1/Pref) - fp0);
>             B2 = (B/abs(df1))*(f1p/f1);
>         }
>     }
167c204,209
<         << "\t      Psmax  = " << Psmax       << "\n";
---
>         << "\t       P0    = " << P0          << "\n"
>         << "\t       P1    = " << P1          << "\n"
>         << "\t      df1    = " << df1         << "\n";
>     out << "\t#      fp0   = " << fp0         << "\n"
>         << "\t#      f1    = " << f1          << "\n"
>         << "\t#      B2    = " << B2          << "\n";
179c221,222
<     Psmax *= s_P;
---
>     P0    *= s_P;
>     P1    *= s_P;
diff -r HEburn-/Subs/HotSpotRateFunc.C HEburn/Subs/HotSpotRateFunc.C
3a4,33
> double HotSpotRate::f(double ps)
> {
>     if( ps < P1 )
>     {
>         if( P0 < 0.0 )  // backwards compatibility
>             return exp(A+B*ps/Pref);
>         if( ps <= P0 )
>             return 0.0;
>         return exp(A+B*ps/Pref) - fp0*(1.+B*(ps-P0)/Pref);
>     }
>     if( df1 <= 0. )
>         return f1;
>     return f1*(1.0 + df1*(1. - exp(-B2*(ps-P1)/Pref)));
> }
> 
> double HotSpotRate::dfdp(double ps)
> {
>     if( ps <= P1 )
>     {
>         if( P0 < 0.0 )  // backwards compatibility
>             return (B/Pref)*exp(A+B*ps/Pref);
>         if( ps <= P0 )
>             return 0.0;
>         return (B/Pref)*(exp(A+B*ps/Pref) - fp0);
>     }
>     if( df1 <= 0. )
>         return 0.0;
>     return (B2/Pref)*f1*df1*exp(-B2*(ps-P1)/Pref);
> }
> 
diff -r HEburn-/Subs/MakeFile HEburn/Subs/MakeFile
12c12
< CWD=/home/ralph/AMRITA/CFD/EOSlib/src
---
> CWD=/home/ralph/AMRITA/CFD/EOSlib
16c16
< IFLAGS=-I.. -I/home/ralph/AMRITA/CFD/EOSlib/src/include -I/home/ralph/AMRITA/CFD/EOSlib/src/include/backward 
---
> IFLAGS=-I.. -I/home/ralph/AMRITA/CFD/EOSlib/include -I/home/ralph/AMRITA/CFD/EOSlib/include/backward 
381c381
< Arrhenius.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../Arrhenius.h ../HE1.h 
---
> Arrhenius.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../Arrhenius.h ../HE1.h 
387c387
< ArrheniusFunc.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../Arrhenius.h 
---
> ArrheniusFunc.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../Arrhenius.h 
390c390
< ArrheniusRT.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../ArrheniusRT.h ../HotSpotHE.h 
---
> ArrheniusRT.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../ArrheniusRT.h ../HotSpotHE.h 
396c396
< ArrheniusRTFunc.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../ArrheniusRT.h 
---
> ArrheniusRTFunc.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../ArrheniusRT.h 
399c399
< FFQrate.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../FFQrate.h ../HEQ.h 
---
> FFQrate.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../FFQrate.h ../HEQ.h 
405c405
< FFQrateFunc.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../FFQrate.h 
---
> FFQrateFunc.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../FFQrate.h 
408c408
< FFrate.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../FFrate.h ../HE1.h 
---
> FFrate.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../FFrate.h ../HE1.h 
414c414
< FFrateFunc.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../FFrate.h 
---
> FFrateFunc.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../FFrate.h 
450c450
< HEQ.C : ../HEQ.h /home/ralph/AMRITA/CFD/EOSlib/src/include/DataBase.h 
---
> HEQ.C : ../HEQ.h /home/ralph/AMRITA/CFD/EOSlib/include/DataBase.h 
465c465
< HotSpotCC_HE.C : ../HotSpotCC_HE.h /home/ralph/AMRITA/CFD/EOSlib/src/include/DataBase.h 
---
> HotSpotCC_HE.C : ../HotSpotCC_HE.h /home/ralph/AMRITA/CFD/EOSlib/include/DataBase.h 
468c468
< HotSpotCC_Rate.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../HotSpotCC_Rate.h ../HotSpotCC_HE.h 
---
> HotSpotCC_Rate.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../HotSpotCC_Rate.h ../HotSpotCC_HE.h 
474c474
< HotSpotCC_RateFunc.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../HotSpotCC_Rate.h /home/ralph/AMRITA/CFD/EOSlib/src/include/LocalMath.h 
---
> HotSpotCC_RateFunc.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../HotSpotCC_Rate.h /home/ralph/AMRITA/CFD/EOSlib/include/LocalMath.h 
477c477
< HotSpotHE2.C : ../HotSpotHE2.h /home/ralph/AMRITA/CFD/EOSlib/src/include/DataBase.h 
---
> HotSpotHE2.C : ../HotSpotHE2.h /home/ralph/AMRITA/CFD/EOSlib/include/DataBase.h 
480c480
< HotSpotHE.C : ../HotSpotHE.h /home/ralph/AMRITA/CFD/EOSlib/src/include/DataBase.h 
---
> HotSpotHE.C : ../HotSpotHE.h /home/ralph/AMRITA/CFD/EOSlib/include/DataBase.h 
483c483
< HotSpotHE_CC.C : ../HotSpotHE_CC.h /home/ralph/AMRITA/CFD/EOSlib/src/include/DataBase.h 
---
> HotSpotHE_CC.C : ../HotSpotHE_CC.h /home/ralph/AMRITA/CFD/EOSlib/include/DataBase.h 
486c486
< HotSpotRate2.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../HotSpotRate2.h ../HotSpotHE2.h 
---
> HotSpotRate2.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../HotSpotRate2.h ../HotSpotHE2.h 
492c492
< HotSpotRate2Func.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../HotSpotRate2.h 
---
> HotSpotRate2Func.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../HotSpotRate2.h 
495c495
< HotSpotRate.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../HotSpotRate.h ../HotSpotHE.h 
---
> HotSpotRate.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../HotSpotRate.h ../HotSpotHE.h 
498c498
< HotSpotRateCC.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../HotSpotRateCC.h ../HotSpotHE_CC.h 
---
> HotSpotRateCC.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../HotSpotRateCC.h ../HotSpotHE_CC.h 
504c504
< HotSpotRateCCfunc.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../HotSpotRateCC.h /home/ralph/AMRITA/CFD/EOSlib/src/include/LocalMath.h 
---
> HotSpotRateCCfunc.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../HotSpotRateCC.h /home/ralph/AMRITA/CFD/EOSlib/include/LocalMath.h 
510c510
< HotSpotRateExp.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../HotSpotRateExp.h ../HotSpotHE2.h 
---
> HotSpotRateExp.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../HotSpotRateExp.h ../HotSpotHE2.h 
516c516
< HotSpotRateExpFunc.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../HotSpotRateExp.h 
---
> HotSpotRateExpFunc.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../HotSpotRateExp.h 
519c519
< HotSpotRateFunc.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../HotSpotRate.h 
---
> HotSpotRateFunc.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../HotSpotRate.h 
522c522
< IgnitionGrowth.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../IgnitionGrowth.h ../HE1.h 
---
> IgnitionGrowth.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../IgnitionGrowth.h ../HE1.h 
528c528
< IgnitionGrowthFunc.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../IgnitionGrowth.h 
---
> IgnitionGrowthFunc.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../IgnitionGrowth.h 
531c531
< IgnitionGrowthRT.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../IgnitionGrowthRT.h ../HotSpotHE.h 
---
> IgnitionGrowthRT.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../IgnitionGrowthRT.h ../HotSpotHE.h 
537c537
< IgnitionGrowthRTfunc.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../IgnitionGrowthRT.h 
---
> IgnitionGrowthRTfunc.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../IgnitionGrowthRT.h 
540c540
< PnRate.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../PnRate.h ../HE1.h 
---
> PnRate.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../PnRate.h ../HE1.h 
546c546
< PnRateFunc.C : /home/ralph/AMRITA/CFD/EOSlib/src/include/PTequilibrium.h ../PnRate.h 
---
> PnRateFunc.C : /home/ralph/AMRITA/CFD/EOSlib/include/PTequilibrium.h ../PnRate.h 
