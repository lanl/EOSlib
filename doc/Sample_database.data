The format for a data file block is:
  base:type::name; units=<unit>
base - base class, such as EOS
type - a particular derived class, such as IdealGas or HEburn
name - a choice of parameters used to instantiate a derived class

For classes which do not have an associated "base" class, such as 
DataBase and SharedLibs, the block is written: ":<type>::<name>". 
These types provide information used internally by the database.

The most commonly used base classes are:
 - EOS
 - EOS_VT
 - Units

Others include:
 - PhiEq (used for porosity models, used in Porous)
 - HErate (HE reaction rate, used in HEburn)

DataBase supports special "dot" commands, such as ".base" and ".units".
These set defaults for base class and units class. 

For Example:

.base=EOS
.units=hydro::std
IdealGas=5/3
{
  variable = value  # value may be expression
}

is the same things as 

EOS:IdealGas=5/3; units=hydro::std
{
}

Another dot command is ".include", which is analogous to #include in C.

Another special database directive is ":use".

For example, 
HErate2:HotSpotRateCC=PBX9502.davis_SURF; units=hydro::std
{
  :use=PBX9502.davis_SURFplus
  Q=0
}

This defines HErate2:HotSpotRateCC=PBX9502.davis_SURF to be the same as
PBX9502.davis_SURFplus with the single changed parameter Q=0.
That is, you can define a new name as a minor adjustment on a previously
existing name.

"#" denotes a comment through the end of a line.

Block comments can be written:

"/*
...
*/" 

Example:

# EOSlib Data Base Template

.include Units.data

:DataBase.=Environment
{
    EOSLIB_SHARED_LIBRARY_PATH = "/path/to/somewhere"
}

:SharedLibs=<base> # What can these be? Do they map to anything in particular?
{
    <base>     = $environment_variable/<lib>
    <derived>  = $environment_variable/<lib>
    . . .

}    

.base = EOS
.units = hydro::std 

/********************************
*          <IdealGas>           *
********************************/
# Is V_ref defined consistently with its comment?
IdealGas=7/5; units=hydro::MKS
{
    gamma = 7/5
    V_ref = 1/1.275                       #  rho = 1.275 g/cm^3
    e_ref = 1.013e5 * V_ref / (gamma - 1) #    P = 1.013e5
    Cv    = e_ref/300                     # Tref = 300 K
}

